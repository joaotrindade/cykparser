/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CykParser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(CYKPARSER)package parser;

import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.lang.Integer;
import java.lang.String;
import java.util.Iterator;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Set;
import java.io.File;
import java.util.Vector;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class CYKPARSER/*@bgen(jjtree)*/implements CYKPARSERTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTCYKPARSERState jjtree = new JJTCYKPARSERState();

/*@egen*/
  static int error = 0;
	static CYKPARSER myCYK;
	static SimpleNode Tree;
	static int term=0;
	static int x=0;
	static String id=null;
	static String[] var = new String[1000];
	static ArrayList<String[]> variables = new ArrayList<String[]>();
	static ArrayList<String[]> terminals = new ArrayList<String[]>();  public static void main(String args [])  {    int op = 0;
		do {
			System.out.println("Deseja:");
		    System.out.println("1-Inserir a gramatica");
		    System.out.println("2-Ler de um ficheiro de texto");
		    Scanner inn = new Scanner(System.in);
		    op = inn.nextInt();
			if(op==1)
			{
				numberOne();
			}
			else if(op==2)
			{
				numberTwo();
			}
		}while(op!=3);  }

public static void numberOne() {
	terminals.clear();
	variables.clear();
	myCYK = new CYKPARSER(System.in);
	try {
		Tree = myCYK.Expression();
	}
	catch(ParseException ex) {
		System.out.println("A producao inserida esta incorrecta");
		return;
	}
	for(int g=0;g<terminals.size();g++) {
			String[] rule = (String[]) terminals.get(g);
			System.out.print(rule[0] + " -> ");
			for(int a=1;a<rule.length;a++)
			{
				System.out.print(rule[a]+ " ");
			}
			System.out.println();
		}
		for(int g=0;g<variables.size();g++) {
			String[] rule = (String[]) variables.get(g);
			System.out.print(rule[0] + " -> ");
			for(int a=1;a<rule.length;a++)
			{
				System.out.print(rule[a]+ " ");
			}
			System.out.println();
		}
		System.out.println("Escolha a frase a testar:");
		Scanner t = new Scanner(System.in);
		String teste = t.nextLine();
		try {
			System.out.println(cyk(teste));
		}
		catch(InterruptedException ie) {
			System.out.println("Nao foi possivel fazer o parse da sua gramatica, por favor verifique se a sua gramatica contem todos os simbolos usados na frase");
			return;
		}
		catch(java.lang.ArrayIndexOutOfBoundsException arr) {
				System.out.println("Existe algum simbolo na frase que nao esta definido na gramatica, por favor corrija a gramatica ou teste outra frase");
				return;
		}
		System.out.println();
	Tree.dump("");
}

public static void numberTwo() {
			terminals.clear();
			variables.clear();
				System.out.println("Insira o nome do ficheiro");
				Scanner n = new Scanner(System.in);
				String nome = n.nextLine();
				try {
					myCYK = new CYKPARSER(new java.io.FileInputStream(nome));
				}
				catch(java.io.FileNotFoundException e) {
					System.out.println ("CYKPARSER: O ficheiro " + nome + " nao foi encontrado.");
					return;
				}
				try {
					Tree = myCYK.Expression();
				}
				catch(ParseException ex) {
					System.out.println("A sua gramatica esta incorrecta, por favor corrija e volte a tentar. Apenas pode conter ate 2 simbolos terminais ou nao terminais");
					return;
				}
				for(int g=0;g<terminals.size();g++) {
			String[] rule = (String[]) terminals.get(g);
			System.out.print(rule[0] + " -> ");
			for(int a=1;a<rule.length;a++)
			{
				System.out.print(rule[a]+ " ");
			}
			System.out.println();
		}
		for(int g=0;g<variables.size();g++) {
			String[] rule = (String[]) variables.get(g);
			System.out.print(rule[0] + " -> ");
			for(int a=1;a<rule.length;a++)
			{
				System.out.print(rule[a]+ " ");
			}
			System.out.println();
		}
		   System.out.println("Escolha a frase a testar:");
		   Scanner t = new Scanner(System.in);
		   String teste = t.nextLine();
		   try {
				System.out.println(cyk(teste));
			}
			catch(InterruptedException ie) {
				System.out.println("Nao foi possivel fazer o parse da sua gramatica, por favor verifique se a sua gramatica contem todos os simbolos usados na frase");
				return;
			}
			catch(java.lang.ArrayIndexOutOfBoundsException arr) {
				System.out.println("Existe algum simbolo na frase que nao esta definido na gramatica, por favor corrija a gramatica ou teste outra frase");
				return;
			}
		System.out.println();
		Tree.dump("");
}

public static String[] returnPosT(String prod) {
	int x=0;
	int contador=0;
	for(int a=0;a<terminals.size();a++)
	{
		String rule[] = terminals.get(a);
		if(prod.equals(rule[1]))
		{
			contador++;
		}
	}
	String[] pos = new String[contador];
	for(int a=0;a<terminals.size();a++)
	{
		String rule[] = terminals.get(a);
		if(prod.equals(rule[1]))
		{
			pos[x] = rule[0];
			x++;
		}
	}
	return pos;
}

public static String[] returnPosNT(String prod, String prod2) {
	if(prod==null | prod2==null)
		return null;
	else
	{
		int x=0;
		int contador=0;
		for(int a=0;a<variables.size();a++)
		{
			String rule[] = variables.get(a);
			if(prod.equals(rule[1]) && prod2.equals(rule[2]))
			{
					contador++;
			}
		}
		String[] pos = new String[contador];
		for(int a=0;a<variables.size();a++)
		{
			String rule[] = variables.get(a);
			if(prod.equals(rule[1]) && prod2.equals(rule[2]))
			{
					pos[x] = rule[0];
					x++;
			}
		}
		return pos;
	}
}

public static boolean cyk(String entrada) throws InterruptedException {
	String ent[] = entrada.split("\\s");
	int n=ent.length;
	
	String[][][] table =new String[n+1][][];
	String[][] temp = new String[n][];
	table[0] = temp;
	for(int x=1;x<=n;++x) {
		int n_temp = n-(x-1);
		String[][] temp1 = new String[n_temp][];
		table[x] = temp1;
	}
	
	
	for(int x=0;x<n;x++) {
		String[] novo = returnPosT(ent[x]);
		table[0][x] = novo;
	}
	System.out.println("");

	for(int i=0;i<n;i++)
	{
		System.out.println("table[0]["+i+"] ->  " + table[0][i][0] + " ");
	}
	System.out.println("");
	
	for (int i = 1; i < n; ++i) {
		
        for (int j = 0; j < n - i; ++j) {
          System.out.print("table["+ i + "]" + "["+ j + "] ->");
		  
		  String[] prod = table[i][j];
		  
		   for (int k = i - 1; k >= 0; --k) {
            
			String[] downprod = table[k][j];
            String[] diagprod = table[i - k - 1][j + k + 1];
			
			if(diagprod == null || downprod == null)
			{

			}
			else
			{
				if (downprod[0] != null && diagprod[0] != null) {
				  for (int ii = 0; ii < downprod.length; ++ii) {
					String prod1 = downprod[ii];
					
					for (int jj = 0; jj < diagprod.length; ++jj) {
					  String prod2 = diagprod[jj];
					  String[] rightside = returnPosNT(prod1,prod2);
					  if (rightside==null || rightside.length == 0) {
					  
					  }
					  else
					  {
						if (prod == null) {
							prod = new String[100];
							table[i][j] = prod;
						}
						
						  String[] arr = new String[1000];
						  boolean found=false;
						  boolean vainada=false;
						  int kk=0;
						  
							for(int verifyNULLS=0;verifyNULLS<prod.length;verifyNULLS++)
							{
								if(prod[verifyNULLS] != null)
								{
									vainada=true;
								}
							}
							
							if(vainada==true)
							{
								for(kk = 0 ; kk < prod.length; kk++) arr[kk] = prod[kk];
							}
						  
							for(int ll = 0 ; ll < rightside.length; ll++)
							{
								found = false;
								for(int pp = 0; pp < kk; pp++)
								{
									if (rightside[ll] == arr[pp]) found = true;
								}
								
								if (found == false) arr[kk] = rightside[ll];
								kk++;
							}
						  
						  table[i][j]=arr;
						  for(int a=0;a<kk;a++)
						  {
							if(table[i][j][a]!="") 
								System.out.print(table[i][j][a]);
						  }
						  System.out.println("");
						}
					}
				  }
				}
			}
		}
		}
		System.out.println();
	}	
	
	if(table[n-1][0] != null)
	{
		if(table[n-1][0][0] != null)
		{
			return true;
		}
		else
			return false;
	}
	else
		return false;
	}
}PARSER_END(CYKPARSER)SKIP : 
{ 
 " " | "\r" | "\t"
}

TOKEN:
{
	<LF : "\n">
	|<LFLF: " \n">
	| <VARIABLE : (["A"-"Z"])+ >
	| <TS : (["A"-"Z"])(["a"-"z"])+ >
	| <TERMINAL : (["a"-"z"])+ >
	| <DIVISION : "->" >
} 

SimpleNode Expression()        : {/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) START */
                try {
/*@egen*/
		(Expr1())+/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {return jjtn000;}
		|
		<LFLF>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void Expr1()            : {/*@bgen(jjtree) ASSIGNMNT */
                            SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMNT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t,t2,t3,t4;}
{/*@bgen(jjtree) ASSIGNMNT */
        try {
/*@egen*/
	(t=<VARIABLE>
	{
		jjtn000.var = t.image;
		id=t.image;
	}<DIVISION>
	((t2=<VARIABLE>
	{
		jjtn000.prod1 = t2.image;
		var[x]=t2.image;
		x++;
	}
	(t3=<VARIABLE>
	{
		jjtn000.prod2 = t3.image;
		var[x]=t3.image;
		x++;
	}
	|
	t4=<TS>
	{
		jjtn000.prod2 = t4.image;
		var[x]=t4.image;
		x++;
	}))
	|
	(t2=<TS>
	{
		jjtn000.prod1 = t2.image;
		var[x]=t2.image;
		x++;
	}
	(t3=<VARIABLE>
	{
		jjtn000.prod2 = t3.image;
		var[x]=t3.image;
		x++;
	}
	|
	t4=<TS>
	{
		jjtn000.prod2 = t4.image;
		var[x]=t4.image;
		x++;
	}))
	|
	t2=<TERMINAL>
	{
		jjtn000.prod1 = t2.image;
		term=1;
		var[x]=t2.image;
		x++;
	})
	|
	t=<TS>
	{
		jjtn000.var = t.image;
		id=t.image;
	}
	<DIVISION>
	t2=<TERMINAL>
	{
		jjtn000.prod1 = t2.image;
		term=1;
		var[x]=t2.image;
		x++;
	}
	)
	t3=<LF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if(term==0)
		{
			String[] total = new String[x+1];
			total[0]=id;
			for(int i=0;i<x;i++)
			{
				total[i+1]=var[i];
			}
			variables.add(total);
		}
		else
		{
			String[] total = new String[2];
			total[0]=id;
			total[1]=var[0];
			terminals.add(total);
		}
		x=0;
		term=0;
		var = new String[1000];
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
